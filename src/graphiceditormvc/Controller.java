package graphiceditormvc;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;
import java.io.*;

/**
 * La classe e' la finestra principale del programma GraphicEditorMVC.
 * Il programma e' un editor per creare documenti formati da forme geometriche colorate.
 * Il programma implementa il pattern Model/View/Controller:
 * il Controller (interfaccia utente) modifica il Model (documento), 
 * notificando le View (rappresentazione grafica o testuale del documento) delle avvenute modifiche.
 * Ad ogni modifica le View si aggiornano leggendo il documento.
 * <p>
 * Classi principali utilizzate dal programma:
 * <ul>
 * <li>Controller: la finestra principale. Crea o apre dei documenti di tipo Model e gestisce le azioni dell'utente.
 * <li>Model: il documento gestito dal programma.
 * <li>Forma: la singola forma geometrica inclusa nel documento di tipo Model.
 * <li>GraphicView: un pannello che fornisce una vista in grafica vettoriale del documento di tipo Model.
 * <li>WndListaView: una finestra di dialogo che fornisce una vista testuale del documento di tipo Model.
 * <li>SizeDialog: una finestra di dialogo per la scelta delle dimensioni di un nuovo documento.
 * </ul>
 * <p>
 * Il tipo di possibili forme e' descritto dall'enumerazione TipoForma.
 */
public class Controller extends javax.swing.JFrame{

    Model documento;
    GraphicView vistaGrafica;
    ArrayList<UndoItem> undoList;
    File file;
    boolean saved, moved;
    Model copia; // Per gestire l'undo del trascinamento
    WndListaView vistaTesto; // Vista testuale del documento
    JScrollPane scrollPanel;
    
    /**
     * crea una nuova finestra di tipo Controller
     */
    public Controller() {
        initComponents();
        saved=false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tools_group = new javax.swing.ButtonGroup();
        statusPanel = new javax.swing.JPanel();
        lbl_status = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        jPanel1 = new javax.swing.JPanel();
        btn_select = new javax.swing.JToggleButton();
        btn_delete = new javax.swing.JToggleButton();
        btn_square = new javax.swing.JToggleButton();
        btn_circle = new javax.swing.JToggleButton();
        btn_triangle = new javax.swing.JToggleButton();
        jSeparator3 = new javax.swing.JSeparator();
        btnColor = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuNew = new javax.swing.JMenuItem();
        menuOpen = new javax.swing.JMenuItem();
        menuClose = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuSave = new javax.swing.JMenuItem();
        menuSaveAs = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuUndo = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        menuLista = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Drawing");
        setLocation(new java.awt.Point(200, 200));
        setMinimumSize(new java.awt.Dimension(700, 400));
        setPreferredSize(new java.awt.Dimension(700, 400));

        statusPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        statusPanel.setMaximumSize(new java.awt.Dimension(1400, 26));
        statusPanel.setMinimumSize(new java.awt.Dimension(43, 26));
        statusPanel.setLayout(new javax.swing.BoxLayout(statusPanel, javax.swing.BoxLayout.LINE_AXIS));

        lbl_status.setText("Status");
        statusPanel.add(lbl_status);

        getContentPane().add(statusPanel, java.awt.BorderLayout.SOUTH);

        jToolBar1.setRollover(true);
        jToolBar1.setMaximumSize(new java.awt.Dimension(65911, 42));

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        tools_group.add(btn_select);
        btn_select.setSelected(true);
        btn_select.setText("Select");
        btn_select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_selectActionPerformed(evt);
            }
        });
        jPanel1.add(btn_select);

        tools_group.add(btn_delete);
        btn_delete.setText("Delete");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });
        jPanel1.add(btn_delete);

        tools_group.add(btn_square);
        btn_square.setText("Square");
        btn_square.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_squareActionPerformed(evt);
            }
        });
        jPanel1.add(btn_square);

        tools_group.add(btn_circle);
        btn_circle.setText("Circle");
        btn_circle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_circleActionPerformed(evt);
            }
        });
        jPanel1.add(btn_circle);

        tools_group.add(btn_triangle);
        btn_triangle.setText("Triangle");
        btn_triangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_triangleActionPerformed(evt);
            }
        });
        jPanel1.add(btn_triangle);

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setMaximumSize(new java.awt.Dimension(10, 38));
        jSeparator3.setMinimumSize(new java.awt.Dimension(10, 38));
        jSeparator3.setPreferredSize(new java.awt.Dimension(10, 38));
        jPanel1.add(jSeparator3);

        btnColor.setBackground(new java.awt.Color(0, 0, 255));
        btnColor.setForeground(new java.awt.Color(0, 0, 255));
        btnColor.setToolTipText("Choose color");
        btnColor.setBorder(null);
        btnColor.setBorderPainted(false);
        btnColor.setFocusable(false);
        btnColor.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnColor.setMargin(new java.awt.Insets(0, 5, 0, 5));
        btnColor.setMaximumSize(new java.awt.Dimension(38, 38));
        btnColor.setMinimumSize(new java.awt.Dimension(38, 38));
        btnColor.setOpaque(true);
        btnColor.setPreferredSize(new java.awt.Dimension(38, 38));
        btnColor.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnColorActionPerformed(evt);
            }
        });
        jPanel1.add(btnColor);

        jToolBar1.add(jPanel1);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        mainPanel.setBackground(new java.awt.Color(128, 128, 128));
        mainPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        mainPanel.setLayout(new javax.swing.BoxLayout(mainPanel, javax.swing.BoxLayout.LINE_AXIS));
        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        menuNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menuNew.setText("Nuovo");
        menuNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNewActionPerformed(evt);
            }
        });
        jMenu1.add(menuNew);

        menuOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuOpen.setText("Apri");
        menuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpenActionPerformed(evt);
            }
        });
        jMenu1.add(menuOpen);

        menuClose.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        menuClose.setText("Chiudi");
        menuClose.setEnabled(false);
        menuClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCloseActionPerformed(evt);
            }
        });
        jMenu1.add(menuClose);
        jMenu1.add(jSeparator1);

        menuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuSave.setText("Salva");
        menuSave.setEnabled(false);
        menuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSaveActionPerformed(evt);
            }
        });
        jMenu1.add(menuSave);

        menuSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuSaveAs.setText("Salva come ...");
        menuSaveAs.setEnabled(false);
        menuSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSaveAsActionPerformed(evt);
            }
        });
        jMenu1.add(menuSaveAs);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Modifica");

        menuUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        menuUndo.setText("Annulla");
        menuUndo.setEnabled(false);
        menuUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuUndoActionPerformed(evt);
            }
        });
        jMenu2.add(menuUndo);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Visualizza");

        menuLista.setText("Lista forme");
        menuLista.setEnabled(false);
        menuLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuListaActionPerformed(evt);
            }
        });
        jMenu3.add(menuLista);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnColorActionPerformed
        // Faccio scegliere il colore da una finestra di dialogo
        Color newColor = JColorChooser.showDialog(null, "Scegli colore", this.btnColor.getBackground());
        if(newColor!=null){
            this.btnColor.setForeground(newColor);
            this.btnColor.setBackground(newColor);
        }
    }//GEN-LAST:event_btnColorActionPerformed

    private void btn_selectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_selectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_selectActionPerformed

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void btn_squareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_squareActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_squareActionPerformed

    private void btn_circleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_circleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_circleActionPerformed

    private void btn_triangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_triangleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_triangleActionPerformed

    private void menuUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuUndoActionPerformed
        if(undoList.size()>0){
            // Sostituisco il documento con quello memorizzato nella lista di Undo
            documento=undoList.get(0).documento;
            vistaGrafica.setDocumento(documento);
            if(vistaTesto!=null && vistaTesto.isShowing()) vistaTesto.setDocumento(documento);
            saved=false;
            // Elimino l'ultimo elemento inserito nella lista di undo
            undoList.remove(0);
            // Aggiorno la scritta della voce di menu Undo
            if(undoList.size()>0){
                menuUndo.setText(undoList.get(0).description);
            }
            else{
                menuUndo.setText("Annulla");
                menuUndo.setEnabled(false);
            }
            aggiornaViste();
        }
    }//GEN-LAST:event_menuUndoActionPerformed

    private void menuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSaveActionPerformed
        salva();
    }//GEN-LAST:event_menuSaveActionPerformed

    private void menuCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCloseActionPerformed
        chiudi();
    }//GEN-LAST:event_menuCloseActionPerformed

    private void menuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOpenActionPerformed
        // Faccio scegliere il file da aprire da una finestra di dialogo
        chiudi();
        JFileChooser fc=new JFileChooser(System.getProperty("user.dir"));
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();
            try
            {
                // Apro il file scelto
                FileInputStream fileIn = new FileInputStream(file.getName());
                ObjectInputStream in = new ObjectInputStream(fileIn);
                // Leggo il documento dal file e lo associo alla vista
                documento=(Model)in.readObject();
                associaVistaModello();
                // Chiudo il file
                in.close();
                fileIn.close();
                setTitle(getTitle() + " - " + file.getName());
                setStatus("File " + file.getName() + " aperto");
            }catch(Exception i){
                setStatus("Errore nell'apertura di " + file.getName());
                file=null;
            }
        }
    }//GEN-LAST:event_menuOpenActionPerformed

    private void menuNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNewActionPerformed
        chiudi();
        // Chiedo le dimensioni del documento
        SizeDialog dlg=new SizeDialog(this,true);
        dlg.setVisible(true);
        Dimension d=dlg.getDimensioni();
        if(d!=null){
            // Creo un nuovo documento, associandolo alla vista
            documento=new Model(d.width,d.height);
            associaVistaModello();
            setStatus("New "+documento.getWidth()+"x"+documento.getHeight()+" px document.");
        }
    }//GEN-LAST:event_menuNewActionPerformed

    private void menuSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSaveAsActionPerformed
        salvaConNome();
    }//GEN-LAST:event_menuSaveAsActionPerformed

    private void menuListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuListaActionPerformed
        if(documento!=null){
            if(vistaTesto==null){
                vistaTesto=new WndListaView(this,false,documento);
                vistaTesto.setVisible(true);
            }
            else if(vistaTesto.isShowing()) vistaTesto.requestFocus();
            else vistaTesto.setVisible(true);
        }
    }//GEN-LAST:event_menuListaActionPerformed

    
    /**
     * Il main crea e visualizza una finestra di tipo Controller senza nessun documento associato.
     * 
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Controller.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Controller.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Controller.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Controller.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Controller().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnColor;
    private javax.swing.JToggleButton btn_circle;
    private javax.swing.JToggleButton btn_delete;
    private javax.swing.JToggleButton btn_select;
    private javax.swing.JToggleButton btn_square;
    private javax.swing.JToggleButton btn_triangle;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lbl_status;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuItem menuClose;
    private javax.swing.JMenuItem menuLista;
    private javax.swing.JMenuItem menuNew;
    private javax.swing.JMenuItem menuOpen;
    private javax.swing.JMenuItem menuSave;
    private javax.swing.JMenuItem menuSaveAs;
    private javax.swing.JMenuItem menuUndo;
    private javax.swing.JPanel statusPanel;
    private javax.swing.ButtonGroup tools_group;
    // End of variables declaration//GEN-END:variables
    
    private void associaVistaModello(){
        // Creo una nuova vista grafica
        vistaGrafica=new GraphicView(documento);
        scrollPanel=new JScrollPane(vistaGrafica,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        mainPanel.add(scrollPanel);
        // Associo alla vista un gestore di eventi
        vistaGrafica.addMouseListener(new MouseAdapter(){
            @Override
            public void mouseClicked(MouseEvent e) {
                if(btn_select.isSelected()) seleziona(e);
                else if(btn_delete.isSelected()) elimina(e);
                else inserisci(e);
                aggiornaViste(); 
            }
            @Override
            public void mousePressed(MouseEvent e){
                if(vistaGrafica.getSelezionata()!=-1){
                    copia=new Model(documento);
                }
            }
            @Override
            public void mouseReleased(MouseEvent e) {
                if(copia!=null && moved && vistaGrafica.getSelezionata()!=-1){
                    createUndo("Annulla sposta",copia);
                    copia=null;
                    moved=false;
                }
            }
        });
        vistaGrafica.addMouseMotionListener(new MouseAdapter(){
            @Override
            public void mouseDragged(MouseEvent e){
                sposta(e);
            }
        });
        aggiornaViste();
        // Impostazioni per un documento appena aperto
        saved=true;
        undoList=new ArrayList<>();
        menuSave.setEnabled(true);
        menuSaveAs.setEnabled(true);
        menuClose.setEnabled(true);   
        menuLista.setEnabled(true);
    }
    
    private void chiudi(){
        if(documento!=null){  
          if(!saved){
              // Chiedo se si desidere salvare le modifiche
              int risposta=JOptionPane.showConfirmDialog(this, "Vuoi salvare le modifiche prima di chiudere il file?","Salvataggio richiesto", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
              switch(risposta){
                  case JOptionPane.OK_OPTION:
                      salva();
                      break;
                  case JOptionPane.CANCEL_OPTION:
                      return;
              }
          }
          // Svuoto la lista di undo
          undoList.clear();
          // Disabilito le voci di menu legate al documento
          menuUndo.setText("Annulla");
          menuUndo.setEnabled(false);
          menuSave.setEnabled(false);
          menuSaveAs.setEnabled(false);
          menuClose.setEnabled(false);
          menuLista.setEnabled(false);
          // Rimuovo il nome del file dal titolo
          setTitle("Drawing");
          // Elimino le viste
          scrollPanel.remove(vistaGrafica);
          vistaGrafica=null;
          mainPanel.remove(scrollPanel);
          scrollPanel=null;
          if(vistaTesto!=null && vistaTesto.isShowing()){
              vistaTesto.chiudi();
              vistaTesto=null;
          }
          // Elimino il documento
          documento=null;
          file=null;
          saved=false;
          mainPanel.repaint();
          setStatus("Chiuso documento");
        }
    }
    
    private void setStatus(String status){
        this.lbl_status.setText(status);
    }

    private String getStatus(){
        return this.lbl_status.getText();
    }
    
    private void elimina(MouseEvent e){
        if(seleziona(e)!=-1){
            createUndo("Annulla elimina");
            // Elimino la forma selezionata
            documento.elimina(vistaGrafica.getSelezionata());
            saved=false;
            aggiornaViste();
            setStatus("Eliminata forma");
        }
    }
    
    private int seleziona(MouseEvent e){
        // Seleziono la forma alla posizione del mouse
        Point posizione=e.getPoint();
        int selezionata=-1;
        selezionata=vistaGrafica.seleziona(posizione.x, posizione.y);
        setStatus("Selezionata forma "+selezionata);
        return selezionata;
    }
    
    private void inserisci(MouseEvent e){
        createUndo("Annulla inserisci");
        TipoForma tipo;
        Point posizione=e.getPoint();
        // Il tipo di forma dipende dallo strumento selezionato
        if(btn_square.isSelected()) tipo=TipoForma.QUADRATO;
        else if(btn_circle.isSelected()) tipo=TipoForma.CERCHIO;
        else tipo=TipoForma.TRIANGOLO;
        // Creo la forma e la aggiungo al documento
        Forma f=new Forma(tipo,posizione.x,posizione.y,50,50,btnColor.getBackground());
        documento.add(f);        
        saved=false;
        aggiornaViste();
        setStatus("Inserito "+f.getTipo());
    }
    
    private void sposta(MouseEvent e){
        Point posizione=e.getPoint();
        if(vistaGrafica.getSelezionata()!=-1){
            documento.getForma(vistaGrafica.getSelezionata()).sposta(posizione.x, posizione.y);
            saved=false;
            moved=true;
            aggiornaViste();
            setStatus("Spostata forma "+ vistaGrafica.getSelezionata());
        }
    }
    
    private void createUndo(String description){
        Model copia=new Model(documento);
        createUndo(description,copia);
    }
    
    private void createUndo(String description, Model copia){
        undoList.add(0,new UndoItem(description,copia));
        if(undoList.size()>10) undoList.remove(10);
        if(undoList.size()==1) menuUndo.setEnabled(true);
        menuUndo.setText(description);
    }
    
    private void salvaConNome(){
        if(documento!=null){
            JFileChooser fc=new JFileChooser(System.getProperty("user.dir"));
            int returnVal=fc.showSaveDialog(this);
            if(returnVal==JFileChooser.APPROVE_OPTION){
              file = fc.getSelectedFile();
              salva();
              setTitle(getTitle() + " - " + file.getName());
            }
        }
    }
    
    private void salva(){
        if(documento!=null && !saved){
            if(file==null) salvaConNome();
            else{
              try
              {
                 FileOutputStream fileOut =new FileOutputStream(file.getName());
                 ObjectOutputStream out = new ObjectOutputStream(fileOut);
                 out.writeObject(documento);
                 out.close();
                 fileOut.close();
                 setStatus("Salvato in " + file.getName());
                 saved=true;
              }catch(IOException i){
                  setStatus("Errore durante il salvataggio");
                  file=null;
              }                
            }
        }
    }
    
    private void aggiornaViste(){
        vistaGrafica.repaint();
        if (vistaTesto!=null && vistaTesto.isShowing()) vistaTesto.aggiorna();
    }
}
